What happens when you initialize a repository? Why do you need to do it?
	When I initialize a repository on a directory a metadata is created(starting with . folder). It tracks the files that
	you will be changing. I need it to go back to the previous version of my project if any difficult bugs need to be fixed.


How is the staging area different from the working directory and the repository? What value do you think it offers?
	Staging area is different from the working directory and the repository as it the middle area between them. When we add
	the files to the repository from the working directory, it first gets added(git add) to the staging area. Only after 
	we make commit then the file will be added to the repository for handling.
	It ables to make separate commit in the same directory to different files


How can you use the staging area to make sure you have one commit per logical change?
	Using git diff without any arguments, we can see the changes made between the working directory and the staging area. 
	And staging area must be already created using git add it not created. And then we use git diff.
	Also using git diff --staged to compare files among staging area and the repository, we can make sure that we have one
	logical change between them before we start committing.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	Branches make the copy of the master version of the commit, using git branch branch_name. You can view the branches using 
	git branch only, and select the branch using git checkout branch_name.
	Some situations are when you are trying for different version of the software at the same time or will be helpful while
	working in groups. First you make the branch from the master, and select that branch. And then when you make changes, the
	changes will occur only in that branch. You can have more than one branch. And what's more, when you commit it, only the 
	branch that you are will have that commit (not in other branches).


How do the diagrams help you visualize the branch structure?
	Like a branch in a tree, diagrams drawn here for indicating branches really helped in looking the view where the branches
	has occured. And the next commit to the branch as the how the branch is growing. As the leaves on the branch of the tree 
	do not have direct access to each other but only to the corresponding leaves other descending form the structure and finally
	the root, The commits on the one branch dont have the knowledge of the commit on the other branch unless you have their commit
	ID. Also the commit which is made on the branch forming another branch but donot initialize branch. Then we would have to 
	access it direct using the commit ID. Here, arrow is used in diagram to know which content can be viewed using git log, and 
	only the previous directly connected by an arrow is only visible. Hence on visualizing the branch structure, we would precisely
	know about the contents of git log and knowledge about branche allowing to connect two branches if needed for merging. Also, 
	helpful for group collaboration(when hvaing two commits on different branch and then combining it).

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	The result of merging two branches is a single branch. And that single branch is the branch that is in before the (#) sign. This
	new branches (master) will have all the commits made by both branch in the order of time. The common codes will be added to a 
	single file in code. The code which is deleted or added will be compared to the original file when the branch were separated. 
	If in both, the code is deleted, then it will be deleted if any new code is added, the new code is added in the final one.
	We reprsent in the diagram the way we do because it will help us give knowledge about the commit and the parent and the commit 
	log that will be displayed from the current branch.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?
	Automatic merging:
	Pros:
		easy, don't have to waste your time to manage it.
		If code doesn't modify the same element, it automatically merges it.
		If two of them are working and both removed the same code, then in the final version that code wouldn't be present.
		Same implementation but different function name can be differentiated.
	Cons:
		It doesn't go in depth.
		Two functions having same name, different implemetation is not differentiated here. Instead Git prompts for programmer to 
		solve the problem.

	Manual merging:
	Pros:
		You will not have any errors.
	Cons:
		Takes a lot of time managing the project.
		And two of the developer may be working on same feature.